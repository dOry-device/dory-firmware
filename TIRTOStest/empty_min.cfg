/*
 * Copyright (c) 2014, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== empty_min.cfg ========
 */

/* ================ General configuration ================ */
var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Error = xdc.useModule('xdc.runtime.Error');
var Main = xdc.useModule('xdc.runtime.Main');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');

/* ================ System configuration ================ */
var SysCallback = xdc.useModule('xdc.runtime.SysCallback');
var SysMin = xdc.useModule('xdc.runtime.SysMin');
System.SupportProxy = xdc.module("xdc.runtime.SysMin");
System.maxAtexitHandlers = 4;

/* Remove debug strings from the application */
Text.isLoaded = false;

/* Remove the raise hook from the application */
Error.raiseHook = null;

/*
 *  Program.stack is ignored with IAR. Use the project options in
 *  IAR Embedded Workbench to alter the system stack size.
 */
if (!Program.build.target.$name.match(/iar/)) {
    /*
     *  Reducing the system stack size (used by ISRs and Swis) to reduce
     *  RAM usage.
     */
Program.stack = 1024;
}

/* ================ Kernel configuration ================ */
/* Use Custom library with no logging or asserts */
BIOS.libType = BIOS.LibType_Custom;
BIOS.logsEnabled = false;
BIOS.assertsEnabled = false;

/* Do not create a heap for dynamic allocations */
BIOS.heapSize = 0;

/* Do not allow dynamic creation of kernel objects */
BIOS.runtimeCreatesEnabled = false;

/* Do allow Swis in the system */
BIOS.swiEnabled = false;

/* Do not check Task or System stacks  */
Task.checkStackFlag = false;
Hwi.checkStackFlag = false;

/* Reduce the number of Task priorities */
Task.numPriorities = 4;

/* Reduce the default stack size */
Task.defaultStackSize = 512;

/* Do not create an Idle thread */
Task.enableIdleTask = false;

var task0Params = new Task.Params();
task0Params.instance.name = "heartBeat";
task0Params.arg0 = 1000;
task0Params.stackSize = 620;
Program.global.heartBeatTask = Task.create("&heartBeatFxn", task0Params);

/* ================ Driver configuration ================ */
var TIRTOS = xdc.useModule('ti.tirtos.TIRTOS');
TIRTOS.useGPIO = true;
var task1Params = new Task.Params();
task1Params.instance.name = "greenLed";
Program.global.greenLed = Task.create("&greenLedFxn", task1Params);
TIRTOS.useI2C = true;
TIRTOS.useUART = true;
SysMin.bufSize = 128;

/* ================ Hwi configuration =================== */
// Statically create a I2CUSCIB Hwi in the .cfg file
var hwi0Params = new Hwi.Params();
hwi0Params.instance.name = "hwi0";
hwi0Params.arg = 0;  // I2C_config[0];
Program.global.hwi0 = Hwi.create(55, "&I2CUSCIB_hwiIntFxn", hwi0Params);



var hwi1Params = new Hwi.Params();
hwi1Params.instance.name = "hwi1";
Program.global.hwi1 = Hwi.create(46, "&UARTUSCIA_hwiIntFxn", hwi1Params);
var task2Params = new Task.Params();
task2Params.instance.name = "echo";
task2Params.stackSize = 768;
Program.global.echo = Task.create("&echoFxn", task2Params);
Hwi.dispatcherSwiSupport = true;
var hwi2Params = new Hwi.Params();
hwi2Params.instance.name = "hwi2";
Program.global.hwi2 = Hwi.create(56, "&doryUARTfxn", hwi2Params);
var task3Params = new Task.Params();
task3Params.instance.name = "gpsTask";
task3Params.priority = 3;
task3Params.stackSize = 768;
Program.global.gpsTask = Task.create("&gpsTaskFxn", task3Params);
var hwi3Params = new Hwi.Params();
hwi3Params.instance.name = "null";
var hwi3 = Hwi.create(47, "&port1_isr", hwi3Params);
